---
title: 01_QC
author: Qian Hui TAN
date: '`r format(Sys.time(), "%d %B %Y")`'
format:
  html: 
    keep-md: true
    embed-resources: true
    df-print: kable
    toc: true
    toc-depth: 3
    code-fold: true
    number-sections: true
    smooth-scroll: true
    code-tools: true
    code-line-numbers: true
  gfm: 
    df-print: kable
    toc: true 
    toc-depth: 3
    number-sections: true
---
# 01_QC

In this notebook, we perform quality control on our dataset. 

```{r global_options, echo=FALSE}
knitr::opts_chunk$set(fig.path='../figures/01_QC/',
                      dev = c("png"))

```

# Setup

```{r}
## If output directory doesn't exist, create it
if(!dir.exists("../output")){
    dir.create("../output/")
  }
  
if(!dir.exists("../output/01_QC")){
    dir.create("../output/01_QC")
  }
  
output_dir <- "../output/01_QC/"
  
```


```{r}
suppressPackageStartupMessages({
    library(dplyr)
    library(readr)
    library(tidyr)
    library(ggplot2)
    library(janitor)
    library(GEOquery)
    library(DESeq2)
    library(reshape2) # melt function
    library(biomaRt)
    library(GenomicFeatures)
    library(scales)
    library(ggrepel)
    library(pheatmap)
    library(viridis)
    library(lubridate)
    library(DT)
})

source("../../scripts/R/functions.R")
```

```{r}
# PCA theme
pca_th <- theme(plot.title = element_text(size = 20),
         axis.title.x = element_text(size = 15), 
         axis.title.y = element_text(size = 15),
         axis.text.x = element_text(size = 15),
         axis.text.y = element_text(size = 15))
```


# Preparing objects for DESeq

## Creating the data matrix

```{r}
df_counts <- read.delim(
    file = "../data/GSE139204_aging_rm_counts.txt.gz")

# Add gene_id to rownames
rownames(df_counts) <- df_counts$gene_id

# Remove non-numeric columns
df_counts <- df_counts[ ,!colnames(df_counts) %in% c("gene_id", "gene_name")]

head(df_counts)
```

## Which genome build? 

### Get metadata from series matrix file
```
#| eval: FALSE
### -- Get metadata (run once) --- ###  

#Get series matrix files that contain the metadata
geo_file <- GEOquery::getGEO(filename = "../data/GSE139204_series_matrix.txt")

# Extract the metadata
geo_md <- pData(phenoData(geo_file)) %>% clean_names()
write_delim(geo_md, file = "../data/gse139204_metadata.txt")
```

Which genome build were these aligned to? 

```{r}
geo_md <- read_delim("../data/gse139204_metadata.txt",
                     show_col_types = FALSE)

unique(geo_md$data_processing_5)
```

This was aligned to GRCm38.92. 

```{r}
# Keep only metadata columns of interest
keep <- c("title", "tissue_ch1", "treatment_ch1", "age_ch1")

shorter_md <- geo_md %>% 
  dplyr::select(all_of(keep))

write_delim(shorter_md, file = "../data/gse139204_shorter_metadata.txt")

rm(geo_md) # Remove unneeded files

head(shorter_md)
```

RM means rapamycin-treated. We remove the RM samples since we aren't interested in them. 

This dataset aligned to `GRCm38.92`. The `gtf` file for `38.92` isn't available in the Ensembl Archive, so we use `GRCm38.94` for now.

Create gene-level annotations: 
```
# eval: FALSE
### --- Get gene-level annotations (run once) --- ###

mm.gtf.db <- makeTxDbFromGFF("../../data/annotation/Mus_musculus.GRCm38.94.chr.gtf.gz", 
                             format = "gtf" )

ensembl.genes = genes(mm.gtf.db)
mouse = useEnsembl(biomart = "ENSEMBL_MART_ENSEMBL", 
                   dataset = "mmusculus_gene_ensembl", mirror = "useast")
bm.annotations = getBM(attributes=c("ensembl_gene_id", "entrezgene_id", "gene_biotype", "external_gene_name"), 
                       mart = mouse, 
                       filters="ensembl_gene_id", 
                       values=ensembl.genes$gene_id, uniqueRows=TRUE)
ensembl.genes$gene_biotype = bm.annotations$gene_biotype[match(ensembl.genes$gene_id, bm.annotations$ensembl_gene_id) ]
ensembl.genes$entrezgene_id = bm.annotations$entrezgene_id[match(ensembl.genes$gene_id, bm.annotations$ensembl_gene_id) ]
ensembl.genes$external_gene_name = bm.annotations$external_gene_name[match(ensembl.genes$gene_id, bm.annotations$ensembl_gene_id) ]

# save this as RDS so we don't have to keep running it
saveRDS(bm.annotations, file = "../output/mm10_94_bm_annotations.RDS")
saveRDS(ensembl.genes, file = "../../data/annotation/mm10_94_ensembl_genes.RDS")
```

## Create metadata

Conveniently, the names contain the metadata - we just have to split them: 

```{r}
experimental_metadata <- tibble(sample_id = colnames(df_counts))

# Keep only rows without RM (non-rapamycin treated rows)
experimental_metadata <- experimental_metadata [grep("RM", experimental_metadata$sample_id, invert = TRUE), ] %>% 
  separate(sample_id, into = c("age", "muscle", "rep"),
           remove = FALSE)

# Convert to factor
experimental_metadata$age <- gsub("X", "", experimental_metadata$age)
experimental_metadata$age <- factor(experimental_metadata$age, 
                                    levels = c("10m", "30m"))
experimental_metadata$muscle <- factor(experimental_metadata$muscle)

experimental_metadata <- experimental_metadata %>% 
  unite(age_muscle, age:muscle, remove = FALSE)

head(experimental_metadata)
```

```{r}
# Remove RAPA columns from df_counts as well
df_counts <- df_counts[ ,colnames(df_counts) %in% experimental_metadata$sample_id]

colnames(df_counts)
```


### Read in files
```{r}
ensembl.genes <- readRDS("../../annotation/mm10_94_ensembl_genes.RDS")
```

## Checking the sex of organisms: 

### Get XIST

```{r}
xist <- "ENSMUSG00000086503"

df_xist <- df_counts[xist, ] %>% melt()
colnames(df_xist) <- c("sample_id", "xist_raw_counts")

#head(df_xist)
```

### Get chrY genes

```{r}
chr_y <- ensembl.genes[seqnames(ensembl.genes) == "Y", ]
y_genes <- chr_y$gene_id

df_y <- colSums(df_counts[rownames(df_counts) %in% y_genes, ]) %>% 
  melt(value.name = "chrY_sum")

df_y$sample_id = rownames(df_y)

#head(df_y)
```


Plot them

```{r}
#| label: check-sex
df_plot <- inner_join(df_xist, df_y)

ggplot(df_plot, aes(x = chrY_sum, y = xist_raw_counts)) +
  geom_point() +
  expand_limits(x = 0, y = 0) +
  scale_y_continuous(limits = c(0, 100)) +
  labs(title = "Xist vs chrY") +
  theme_classic()
```

All samples are male - they have low Xist expression and high chrY expression. 

## Is Deaf1 expressed? 

```{r}
deaf1_gene <- "ENSMUSG00000058886"

df_counts[grep(deaf1_gene, rownames(df_counts), ignore.case = TRUE), ]
```
Yes, it is. 

## Creating the datamatrix
```{r}
data_mat = as.matrix(df_counts)
rownames(data_mat) = rownames(df_counts)

data_mat = apply(round(data_mat), c(1,2), as.integer) # Round to integer
data_mat_nonzero = data_mat[rowSums(data_mat) > 0, ] # Rm non-zero rows

sum(duplicated(rownames(data_mat_nonzero)))# Check that we have no duplicates
```

## Create DESeq object

```{r}
# Create DESeq object
dds = DESeqDataSetFromMatrix(data_mat_nonzero, experimental_metadata, 
                             ~ muscle + age)
colnames(dds) = colnames(data_mat)

#Estimates the size factors using the "median ratio method" described by Equation 5 in Anders and Huber (2010)
dds <- estimateSizeFactors(dds) 
#This function obtains dispersion estimates for a count data set
dds <- estimateDispersions(dds)
#This function transforms the count data to the log2 scale in a way which minimizes differences between samples for rows with small counts
vst <- vst(dds, blind = TRUE) # use blind = TRUE for QC
```

## How many non-zero rows?

How many genes are there in the mouse genome? 
```{r}
nrow(data_mat)
```

How many genes are expressed (at least 1 read in at least 1 sample)? 
```{r}
nrow(data_mat_nonzero)
```

What percentage is this? 

```{r}
nrow(data_mat_nonzero)/nrow(data_mat) * 100
```

94% of all rows are nonzero.

# DESeq QC 

## Dispersion estimates

```{r}
#| label: prefilt-disp-est
## Plot dispersion estimates
plotDispEsts(dds, main = "Dispersion estimates, before filtering")
```

## QC - number of detected genes

```{r}
dds
```

Plotting key metrics for data quality:
```{r}
plt_title = "Before Filtering"
```

::: {.panel-tabset}
### Read counts per sample

```{r}
total_counts <- as.data.frame(colSums(counts(dds)))
colnames(total_counts) <- "total_counts"
total_counts$name = rownames(total_counts)
```

```{r}
#| label: prefilt-qc-rcpersample
# Plot
ggplot(total_counts, aes(x = name, y = total_counts)) +
    geom_bar(stat = "identity") +
    scale_y_continuous("Read counts", 
                       limits = c(0, 4e7),
                       expand = c(0, 0),
                       breaks = seq(0, 4e7, 1e7)) +
    geom_hline(yintercept = 2e7, color = "blue", linetype = "dashed") +
    labs(title = "Read counts per sample",
         x = element_blank()) +
    theme_minimal() +
    coord_flip()
```

### Number of genes detected per sample

```{r}
#| label: prefilt-qc-ngenes

detected = apply(counts(dds), 2, function(col) sum(col > 0 ))
detected = as.data.frame(detected)
detected$name = row.names(detected)
                 
ggplot(detected, aes(x=name, y=detected)) + 
                 geom_bar(stat="identity") + 
                 theme_minimal() + 
                 coord_flip() + 
                 scale_y_continuous("Number of Genes detected", expand=c(0,0),
                                    limits = c(0, 20000)
                                    ) + 
                 scale_x_discrete("Sample") +
                 labs(title = "# of genes detected", 
                     subtitle = plt_title) +
                 geom_hline(yintercept = 17000, color = "blue", linetype = "dashed") 
```

### Size factors

```{r}
#| label: prefilt-sf
df = data.frame(sample_id = names(sizeFactors(dds)), 
                sizeFactors = sizeFactors(dds))

ggplot(df, aes(x = sample_id, y=sizeFactors)) + 
    geom_bar(stat="identity") + 
    scale_y_continuous(limits=c(0,2), expand=c(0,0)) + 
    labs(title = "Size factors for each sample",
         subtitle = plt_title, 
         x = element_blank()) +
    theme_minimal() + 
    theme(axis.text.x = element_text(angle = 90, hjust=1, 
                                     colour="black", size= 10))
```

### Normalized counts (boxplot)

```{r}
#| label: prefilt-qc-ncounts

nc = counts(dds, normalized=TRUE)
nc.melt = melt(nc)

ggplot(nc.melt, aes(x=Var2, y=value)) + 
    geom_boxplot() + 
    theme_classic() + 
    theme(axis.text.x = element_text(angle = 90, colour="black", hjust = 1,
                                     size = 12)) + 
    scale_x_discrete("Sample") + 
    scale_y_continuous("Normalised counts") +
    labs(title = "Normalized counts",
        subtitle = plt_title) 
```

```{r}
nc.threshold = 500000
test = apply(nc, 1, function(x){ any(x > nc.threshold) })
```

The genes with normalized counts greater than `r nc.threshold` are:

```{r}
highly_expressed <- ensembl.genes[test, c("gene_biotype", "external_gene_name")]

unique(highly_expressed$gene_biotype)
```

```{r}
highly_expressed
```
Some pseudogenes, lncRNA and protein-coding genes. 

Plotting the rRNA graph: 
```{r}
#| label: prefilt-qc-rrna

rrna.genes = ensembl.genes$external_gene_name[ensembl.genes$gene_biotype %in% c("Mt_rRNA", "rRNA")]

percentage.of.rrna = (colSums(counts(dds[ rownames(counts(dds)) %in% rrna.genes])) / colSums(counts(dds))) * 100

percentage.of.rrna = as.data.frame(percentage.of.rrna)
percentage.of.rrna$name = row.names(percentage.of.rrna)
#percentage.of.rrna$name = factor(percentage.of.rrna$name,rev(experimental_metadata$sample_id))
ggplot(percentage.of.rrna, 
       aes(x=name, y=percentage.of.rrna)) + 
        geom_hline(yintercept = 5, color = "blue", linetype = "dashed") +
        geom_bar(stat="identity") + 
        theme_classic() + 
        coord_flip() + 
        scale_y_continuous("% rRNA", expand=c(0,0), limits = c(0, 30)) +
        labs(title = "% rRNA") 
```

Checking summary statistics for rRNA: 
```{r}
summary(percentage.of.rrna$percentage.of.rrna)
```

No rRNA present. 

### Proportions of gene biotypes

```{r}
#| label: prefilt-qc-genebiotypes
#| fig-width: 12

pc = ensembl.genes$gene_id[ensembl.genes$gene_biotype == "protein_coding"]
pg = ensembl.genes$gene_id[ensembl.genes$gene_biotype %in% unique(ensembl.genes$gene_biotype)[grep("pseudogene", unique(ensembl.genes$gene_biotype))]]
lc = ensembl.genes$gene_id[ensembl.genes$gene_biotype == "lncRNA"]

totalcounts.pc = colSums(counts(dds)[rownames(counts(dds)) %in% pc,])
totalcounts.pg = colSums(counts(dds)[rownames(counts(dds)) %in% pg,])
totalcounts.lc = colSums(counts(dds)[rownames(counts(dds)) %in% lc,])

totalcounts.other = colSums(counts(dds)[!(rownames(counts(dds)) %in% c(lc,pc,pg)),])

counts.by.biotype = data.frame(name = names(totalcounts.pc),
                         protein_coding = totalcounts.pc,
                         pseudogene = totalcounts.pg,
                         lincRNA = totalcounts.lc,
                         other = totalcounts.other
                         
                         )

#counts.by.biotype$name = factor(counts.by.biotype$name, experimental_metadata$sample_id)

counts.by.biotype = as.data.frame(t(apply(counts.by.biotype[,2:5], 1, function(x){ 100 * (x / sum(x)) }) ))
counts.by.biotype$name = names(totalcounts.pc)
#counts.by.biotype$name = factor(counts.by.biotype$name, #experimental_metadata$sample_id)

counts.by.biotype.melt = melt(counts.by.biotype)


ggplot(counts.by.biotype.melt, aes(x=name, y=value, fill=variable)) +  
    geom_bar(stat="identity") + 
    theme_classic() + 
    scale_y_continuous("% reads", labels = dollar_format(suffix = "%", prefix = ""),  
                       expand=c(0,0)) + scale_x_discrete("Sample") + 
    theme(axis.text.x = element_text(angle = 90, colour="black", #family="Arial", 
                                     hjust = 1, size = 12)) +
    labs(title = "Proportions of gene biotypes", 
        subtitle = plt_title) 
```

Most genes are protein-coding, as expected.
:::

## QC - clustering

We perform 3 types of Quality Control to assess our DESeq dataset:

-   Correlation matrix heatmap
-   Hierarchical clustering
-   PCA

::: {.panel-tabset}
### Correlation matrix heatmap

```{r}
#| label: prefilt-heatmap
#| fig-width: 9
#| fig-height: 9

### Extract the vst matrix from the object
vst_mat <- assay(vst)  
### Compute pairwise correlation values
vst_cor <- cor(vst_mat)
### Plot heatmap
pheatmap(vst_cor, main = "Correlation heatmap, before filtering")

```
### Hierarchical clustering

```{r}
#| label: prefilt-hclust
#| fig-width: 12

sampleDists <- dist(t(assay(vst)))
plot(hclust(sampleDists), main = paste0("Cluster Dendrogram, ", plt_title))
```

### PCA, by condition

```{r}
#| label: prefilt-pca-by-condition

pca_xlim <- c(-50, 50)
pca_ylim <- c(-20, 20)

make_pca(vst, intgroup = "muscle",
         title = "PCA, before filtering", 
         xlimits = pca_xlim,
         ylimits = pca_ylim)
```

### PCA, by age
```{r}
#| label: prefilt-pca-by-age
make_pca(vst, intgroup = "age",
         title = "PCA, before filtering", 
         xlimits = pca_xlim,
         ylimits = pca_ylim) +
  scale_color_brewer(palette = "Set1")
```


### PCA, by age and condition

```{r}
#| label: prefilt-pca-age-and-condition
make_pca_shape(vst, color_by = "muscle", 
               shape_by = "age",
               title = "PCA plot",
               subtitle = "Before removing chrM and rRNA",
               xlimits = pca_xlim, 
               ylimits = pca_ylim)
```

### PCA, by size factor
```{r}
#| label: prefilt-pca-all-sf
#| message: false

make_pca(vst, intgroup = "sizeFactor",
         title = "PCA plot, before filtering",
          xlimits = pca_xlim,
         ylimits = pca_ylim) +
  scale_color_viridis(option = "A")
```
:::

PCA separates by muscle.

# Remove rRNA and mitochondrial genome

We remove all genes that map to rRNA, as well as the mitochondrial chromosome before we proceed with downstream analysis. 

```{r}
plt_title = "after removing rRNA and mitochondrial genome"
```

Checking MT chromosome intact: 

```{r}
in_dds = ensembl.genes[na.omit(match(rownames(counts(dds)), ensembl.genes$gene_id)), ]
table(seqnames(in_dds))
```

Remove MT chromosome, rerun DESeq: 
```{r}
# Remove mitochondrial genome
mit_genes <- ensembl.genes[seqnames(ensembl.genes) %in% "MT", ]$gene_id
dds_rm_mit <- dds[!rownames(counts(dds)) %in% mit_genes, ]

# Remove rRNA
dds_filt = dds_rm_mit[!(row.names(counts(dds_rm_mit)) %in% 
                   ensembl.genes$gene_id[ensembl.genes$gene_biotype %in% 
                                           c("rRNA", "snoRNA", "snRNA", "Mt_rRNA")]), ]
dds_filt = dds_filt[rowSums(counts(dds_filt)) > 0, ]

# Re-estimate dispersions
dds_filt <- estimateSizeFactors(dds_filt) 
dds_filt <- estimateDispersions(dds_filt)
vst_filt <- vst(dds, blind = TRUE) # use blind = TRUE for QC
```
Check that mitochondrial genome has been removed: 

```{r}
in_dds = ensembl.genes[na.omit(match(rownames(counts(dds_filt)), 
                                     ensembl.genes$gene_id)), ]
table(seqnames(in_dds))
```

## Check rRNA removed

```{r}
#| label: rmrna-qc-rrna-percent-rrna
rrna.genes = names(ensembl.genes[ensembl.genes$gene_biotype %in% c("Mt_rRNA", "rRNA", 
                                                                   "snoRNA", "snRNA")])

percentage.of.rrna = (colSums(counts(dds_filt[rownames(counts(dds_filt)) %in% rrna.genes])) / colSums(counts(dds_filt))) * 100
percentage.of.rrna = as.data.frame(percentage.of.rrna)
percentage.of.rrna$name = row.names(percentage.of.rrna)
#percentage.of.rrna$name = factor(percentage.of.rrna$name, rev(experimental_metadata$sample_id))


ggplot(percentage.of.rrna, aes(x=name, y=percentage.of.rrna)) +
  geom_bar(stat="identity") + theme_classic() + coord_flip() + scale_y_continuous("% rRNA", expand=c(0,0)) +
  scale_x_discrete("Sample") +
  ggtitle(paste0("% rRNA, ", plt_title))
```

Checking that rRNA percentage is now zero: 
```{r}
summary(percentage.of.rrna$percentage.of.rrna)
```

## QC - number of genes

::: {.panel-tabset}
### Size Factors after rRNA removal

```{r}
#| label: rmrna-sf

df = data.frame(sample_id = names(sizeFactors(dds_filt)), sizeFactors = sizeFactors(dds_filt))

ggplot(df, aes(x = sample_id, y=sizeFactors)) + 
  geom_bar(stat="identity") + 
  scale_y_continuous(limits=c(0,2), expand=c(0,0)) + 
  theme_classic() + 
  theme(axis.text.x = element_text(angle = 90, hjust=1, colour="black", size=12)) +
  geom_hline(yintercept = 1, color = "blue", linetype = "dashed") +
  ggtitle(paste0("Size Factors, ", plt_title))
```

Summary of size factors: 
```{r}
summary(sizeFactors(dds_filt))
```

Size factors for each sample: 
```{r}
print(sizeFactors(dds_filt))
```

### Read counts per sample after rRNA and chrM removal
```{r}
total_counts <- as.data.frame(colSums(counts(dds_filt)))
colnames(total_counts) <- "total_counts"
total_counts$name = rownames(total_counts)
```


```{r}
#| label: rmrna-qc-filt-rcpersample
# Plot
ggplot(total_counts, aes(x = name, y = total_counts)) +
    geom_bar(stat = "identity") +
    scale_y_continuous("Read counts", 
                       limits = c(0, 4e7),
                       expand = c(0, 0),
                       breaks = seq(0, 4e7, 1e7)) +
    geom_hline(yintercept = 2.5e7, color = "blue", linetype = "dashed") +
    labs(title = "Read counts per sample",
         subtitle = "after removing chrM and rRNA",
         x = element_blank()) +
    theme_minimal() +
    coord_flip()
```

### Number of genes detected per sample after rRNA and chrM removal
```{r}
#| label: rmrna-qc-filt-ngenes

detected = apply(counts(dds_filt), 2, function(col) sum(col > 0 ))
detected = as.data.frame(detected)
detected$name = row.names(detected)
#detected$name = factor(detected$name, rev(experimental_metadata$sample_id))
                 
ggplot(detected, aes(x=name, y=detected)) + 
                 geom_bar(stat="identity") + 
                 theme_minimal() + 
                 coord_flip() + 
                 scale_y_continuous("Number of Genes detected", expand=c(0,0),
                                    limits = c(0, 30000)) + 
                 scale_x_discrete("Sample") +
                 labs(title = "# of genes detected", 
                     subtitle = plt_title) +
                 geom_hline(yintercept = 20000, color = "blue", linetype = "dashed") 
```
:::
## QC- clustering

::: {.panel-tabset}
### Heatmap after rRNA removal

```{r}
#| label: rmrna-rrna-heatmap
#| fig-height: 12
#| fig-width: 12

### Extract the vst matrix from the object
vst_mat <- assay(vst_filt)  

### Compute pairwise correlation values
vst_cor <- cor(vst_mat)

### Plot heatmap
pheatmap(vst_cor, main = "Correlation heatmap, after rRNA removal")
```

### Clustering after rRNA removal

```{r}
#| label: rmrna-clustering-filt

sampleDists <- dist(t(assay(vst_filt)))
plot(hclust(sampleDists), main = paste0("Cluster Dendrogram, ", plt_title))
```

### PCA by condition

```{r}
#| label: rmrna-pca-filt-condition
make_pca(vst_filt, intgroup = "muscle",
         title = "PCA plot, after removing rRNA and chrM",
         xlimits = pca_xlim,
         ylimits = pca_ylim) 
```

### PCA labelled

```{r}
#| label: rmrna-pca-filt-label
make_pca(vst_filt, intgroup = "muscle",
         title = "PCA plot, after removing rRNA and chrM",
         label = TRUE, 
         xlimits = c(-100, 100),
         ylimits = c(-50, 50)) 
```

### PCA by age

```{r}
#| label: rmrna-pca-filt-age
make_pca(vst_filt, intgroup = "age",
         title = "PCA plot, after removing rRNA and chrM",
         xlimits = pca_xlim,
         ylimits = pca_ylim) 
```

### PCA, by age and condition

```{r}
#| label: rmrna-pca-age-and-condition
make_pca_shape(vst_filt, color_by = "muscle", 
               shape_by = "age",
               title = "PCA plot",
               subtitle = "After removing chrM and rRNA",
               xlimits = pca_xlim, 
               ylimits = pca_ylim)
```

:::


# Split the dataset 

Here, we split the dataset in 4 and check each PCA for outliers. 
- Sol
- GAS
- TA
- Tri

## Subset - sol

We keep only the `sol` samples, rerun DESeq, and plot the PCA: 

:::{.panel-tabset}

### Subset 
```{r}
# Subset sol
sol_samples <- colnames(dds_filt)[grep("sol", colnames(dds_filt), ignore.case = TRUE)]
dds_sol <- dds_filt[ ,colnames(dds_filt) %in% sol_samples]
colnames(dds_sol)

design(dds_sol) <- ~age
# Removing lowly expressed genes, only to be done once at the start of the differential expression step
filter = apply(counts(dds_sol, normalized = TRUE), 1, function(x){ mean(x) >= 10 })
dds_sol = dds_sol[filter, ]

dds_sol <- DESeq(dds_sol, parallel = TRUE)
vst_sol <- vst(dds_sol, blind = TRUE)
```

### PCA

```{r}
#| label: pca-sol

make_pca_shape(vst_sol, color_by = "age", shape_by = "muscle",
               title = "PCA, SOL subset",
               xlimits = pca_xlim, 
               ylimits = pca_ylim)
```

:::

## Subset - GAS
:::{.panel-tabset}

### Subset 

```{r}
# Subset
gas_samples <- colnames(dds)[grep("GAS", colnames(dds), ignore.case = TRUE)]
dds_gas <- dds[ ,colnames(dds) %in% gas_samples]
colnames(dds_gas)

# Remove lowly expressed genes
design(dds_gas) <- ~age
# Removing lowly expressed genes, only to be done once at the start of the differential expression step
filter = apply(counts(dds_gas, normalized = TRUE), 1, function(x){ mean(x) >= 10 })
dds_gas = dds_gas[filter, ]

dds_gas <- DESeq(dds_gas, parallel = TRUE)
vst_gas <- vst(dds_gas, blind = TRUE)
```

### PCA

```{r}
#| label: pca-gas

make_pca_shape(vst_gas, color_by = "age", shape_by = "muscle",
               title = "PCA, GAS subset",
               xlimits = pca_xlim, 
               ylimits = pca_ylim)
```

:::

## Subset - TRI

:::{.panel-tabset}

### Subset

```{r}
# Subset
tri_samples <- colnames(dds)[grep("tri", colnames(dds), ignore.case = TRUE)]
dds_tri <- dds[ ,colnames(dds) %in% tri_samples]
colnames(dds_tri)

# Remove lowly expressed genes
design(dds_tri) <- ~age
# Removing lowly expressed genes, only to be done once at the start of the differential expression step
filter = apply(counts(dds_tri, normalized = TRUE), 1, function(x){ mean(x) >= 10 })
dds_tri = dds_tri[filter, ]

dds_tri <- DESeq(dds_tri, parallel = TRUE)

vst_tri <- vst(dds_tri, blind = TRUE)
```

### PCA

```{r}
#| label: pca-tri

make_pca_shape(vst_tri, color_by = "age", shape_by = "muscle",
               title = "PCA, TRI subset",
               xlimits = pca_xlim, 
               ylimits = pca_ylim)
```
:::

## Subset - TA

:::{.panel-tabset}

### Subset

```{r}
# Subset
ta_samples <- colnames(dds)[grep("ta", colnames(dds), ignore.case = TRUE)]
dds_ta <- dds[ ,colnames(dds) %in% ta_samples]
colnames(dds_ta)

# Remove lowly expressed genes
design(dds_ta) <- ~age
# Removing lowly expressed genes, only to be done once at the start of the differential expression step
filter = apply(counts(dds_ta, normalized = TRUE), 1, function(x){ mean(x) >= 10 })
dds_ta = dds_ta[filter, ]

dds_ta <- DESeq(dds_ta, parallel = TRUE)
vst_ta <- vst(dds_ta, blind = FALSE)
```

### PCA

```{r}
#| label: pca-ta

make_pca_shape(vst_ta, color_by = "age", shape_by = "muscle",
               title = "PCA, TA subset",
               xlimits = pca_xlim, 
               ylimits = pca_ylim)
```

What's that outlier? 

```{r}
#| label: pca-ta-labelled

make_pca(vst_ta, intgroup = "age", label = TRUE, 
         xlimits = pca_xlim, 
         ylimits = pca_ylim)
```

10month rep 5 is separating along PC2. Wow. Let's check the correlation heatmap:

```{r}
#| label: ta-heatmap

### Extract the vst matrix from the object
vst_mat <- assay(vst_ta)  

### Compute pairwise correlation values
vst_cor <- cor(vst_mat)

### Plot heatmap
pheatmap(vst_cor, main = "Correlation heatmap, TA samples")
```

10m_TA_Rrep5 is it's own outlier. Let's remove it: 

```{r}
remove <- c("X10m_TA_rep5")

dds_ta_filt<- dds_ta[ ,!colnames(dds_ta) %in% remove]
colnames(dds_ta_filt)

# Remove lowly expressed genes
design(dds_ta) <- ~age
# Removing lowly expressed genes, only to be done once at the start of the differential expression step
filter = apply(counts(dds_ta_filt, normalized = TRUE), 1, function(x){ mean(x) >= 10 })
dds_ta_filt = dds_ta_filt[filter, ]

dds_ta_filt <- DESeq(dds_ta_filt, parallel = TRUE)
vst_ta_filt <- vst(dds_ta_filt, blind = FALSE)
```

:::

# Check Deaf1 levels

:::{.panel-tabset}

## Remove 10m_TA_rep5 from dds_filt

```{r}
remove <- "X10m_TA_rep5"
dds_filt <- dds_filt[ ,!colnames(dds_filt) %in% remove]
colnames(dds_filt)
# Removing lowly expressed genes, only to be done once at the start of the differential expression step
filter = apply(counts(dds_filt, normalized = TRUE), 1, function(x){ mean(x) >= 10 })
dds_filt = dds_filt[filter, ]

dds_filt <- DESeq(dds_filt, parallel = TRUE)
vst_filt <- vst(dds_filt, blind = FALSE)
```
## Normalized counts

```{r}
# check design 
design(dds_filt)
```

```{r}
#| label: deaf1-norm

deaf1_norm <- as.data.frame(counts(dds_filt, normalized = TRUE)[deaf1_gene, ])

deaf1_norm$sample <- rownames(deaf1_norm)
colnames(deaf1_norm) <- c("counts", "sample_id")

ggplot(deaf1_norm, aes(x = sample_id, y = counts)) +
  geom_col() +
  labs(title = "Deaf1 counts, normalized") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90)) 
```

## Boxplot - all conditions

```{r}
deaf1_all <- deaf1_norm %>% 
  separate(sample_id, into = c("age", "muscle", "rep"), remove = FALSE)

deaf1_sol <- deaf1_all[deaf1_all$muscle == "Sol", ]
deaf1_gas <- deaf1_all[deaf1_all$muscle == "GAS", ]
deaf1_tri <- deaf1_all[deaf1_all$muscle == "TRI", ]
deaf1_ta <- deaf1_all[deaf1_all$muscle == "TA", ]
```

Export this: 

```{r}
write.csv(deaf1_all, file = paste0(output_dir, 
                                    "sarcoatlas_agingcrrm_deaf1_normcounts.csv"))
```


```{r}
#| label: deaf1-box-condition-sex
deaf1_cs <- deaf1_all %>% 
  unite(age_muscle, age:muscle, remove = FALSE)

ggplot(deaf1_cs, aes(x = age, y = counts, color = age)) +
  geom_boxplot() +
  geom_point() +
  scale_color_brewer(palette = "Set1") +
  expand_limits(y = 0) +
  facet_wrap(~muscle, nrow = 1) +
  labs(title = "Deaf1 counts, normalized",
       subtitle = "Sarcoatlas, aging_cr_rm",
       y = "Normalized counts") +
  theme_classic()
```

Is Deaf1 significant? 
```{r}
dds_wald = dds_filt

design(dds_wald) <- ~muscle + age

dds_wald <- DESeq(dds_wald, parallel = TRUE)
resultsNames(dds_wald) # check results names

res <- results(dds_wald, name = "age_30m_vs_10m")
res[deaf1_gene, ]
```
# Deaf1 Wald tests for individual conditions

```{r}
unique(colData(dds_filt)$age_muscle)
```


:::{.panel-tabset}
## Sol - Wald

```{r}
dds_wald <- dds_filt
ref_level <- "10m_Sol"

# Reset reference level
colData(dds_wald)$age_muscle <- relevel(factor(colData(dds_wald)$age_muscle), 
                                      ref = ref_level)
# Rerun DESeq
design(dds_wald) <- ~age_muscle
dds_wald <- DESeq(dds_wald, parallel = TRUE)
resultsNames(dds_wald) # check comparisons
```

```{r}
# Extract the result of interest
res <- results(dds_wald, name = "age_muscle_30m_Sol_vs_10m_Sol")

# save this as sol
deaf1_res_sol <- res[deaf1_gene, ]
deaf1_res_sol <- add_res_info(deaf1_res_sol)
deaf1_res_sol$condition <- "SOL"

deaf1_res_sol
```
## GAS - Wald

```{r}
dds_wald <- dds_filt
ref_level <- "10m_GAS"

# Reset reference level
colData(dds_wald)$age_muscle <- relevel(factor(colData(dds_wald)$age_muscle), 
                                      ref = ref_level)
# Rerun DESeq
design(dds_wald) <- ~age_muscle
dds_wald <- DESeq(dds_wald, parallel = TRUE)
resultsNames(dds_wald)
```

```{r}
# Extract the result of interest
res <- results(dds_wald, name = "age_muscle_30m_GAS_vs_10m_GAS")

# save this 
deaf1_res_gas <- res[deaf1_gene, ]
deaf1_res_gas <- add_res_info(deaf1_res_gas)
deaf1_res_gas$condition <- "GAS"

deaf1_res_gas
```

## TRI

```{r}
dds_wald <- dds_filt
ref_level <- "10m_TRI"

# Reset reference level
colData(dds_wald)$age_muscle <- relevel(factor(colData(dds_wald)$age_muscle), 
                                      ref = ref_level)
# Rerun DESeq
design(dds_wald) <- ~age_muscle
dds_wald <- DESeq(dds_wald, parallel = TRUE)
resultsNames(dds_wald)
```

```{r}
# Extract the result of interest
res <- results(dds_wald, name = "age_muscle_30m_TRI_vs_10m_TRI")

# save this as sol
deaf1_res_tri <- res[deaf1_gene, ]
deaf1_res_tri <- add_res_info(deaf1_res_tri)
deaf1_res_tri$condition <- "TRI"

deaf1_res_tri
```

## TA

```{r}
dds_wald <- dds_filt
ref_level <- "10m_TA"

# Reset reference level
colData(dds_wald)$age_muscle <- relevel(factor(colData(dds_wald)$age_muscle), 
                                      ref = ref_level)
# Rerun DESeq
design(dds_wald) <- ~age_muscle
dds_wald <- DESeq(dds_wald, parallel = TRUE)
resultsNames(dds_wald)
```

```{r}
# Extract the result of interest
res <- results(dds_wald, name = "age_muscle_30m_TA_vs_10m_TA")

# save this as sol
deaf1_res_ta <- res[deaf1_gene, ]
deaf1_res_ta <- add_res_info(deaf1_res_ta)

deaf1_res_ta$condition <- "TA"

deaf1_res_ta
```
## Export and combine

```{r}
deaf1_res_export <- rbind(deaf1_res_sol, deaf1_res_gas, 
                          deaf1_res_tri, deaf1_res_ta)
deaf1_res_export

write.csv(deaf1_res_export, file = paste0(output_dir, "sarcoatlas_agingcrrm_deaf1_stats.csv"))
```
:::

# Summary

- Deaf1 decreases in the TA subset after we remove 10m_rep5 (an outlier).
- Deaf1 decreases in the GAS subset. 

# Sessioninfo

```{r}
sessionInfo()
```
